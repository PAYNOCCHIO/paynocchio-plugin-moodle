<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Contains helper class to work with Paynocchio REST API.
 *
 * @package    core_payment
 * @copyright  2024 Paynocchio <ceo@paynocchio.com>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace paygw_paynocchio;

use curl;

defined('MOODLE_INTERNAL') || die();

require_once($CFG->libdir . '/filelib.php');


class paynocchio_helper {

    /**
     * @var string Paynocchio settings strings.
     */
    public const PAYNOCCHIO_USER_UUID_KEY = 'user_uuid';
    public const PAYNOCCHIO_ENV_KEY = 'environment_uuid';
    public const PAYNOCCHIO_CURRENCY_KEY = 'currency_uuid';
    public const PAYNOCCHIO_WALLET_KEY = 'wallet_uuid';
    public const PAYNOCCHIO_TYPE_KEY = 'type_uuid';
    public const PAYNOCCHIO_STATUS_KEY = 'status_uuid';
    public const PAYNOCCHIO_SECRET_KEY = 'secret_uuid';

    /**
     * @var string The payment was authorized or the authorized payment was captured for the order.
     */
    public const CAPTURE_STATUS_COMPLETED = 'COMPLETED';

    /**
     * @var string The merchant intends to capture payment immediately after the customer makes a payment.
     */
    public const ORDER_INTENT_CAPTURE = 'CAPTURE';

    /**
     * @var string The customer approved the payment.
     */
    public const ORDER_STATUS_APPROVED = 'APPROVED';

    /**
     * @var string The base API URL
     */
    private $baseurl;

    /**
     * @var string Environment UUID
     */
    private $environment_uuid;

    /**
     * @var string Paynocchio App secret
     */
    private $secret;

    /**
     * @var string User UUID sent to consturctor
     */
    private $userId;

    /**
     * @var string X Wallet Signature generated by Hash
     */
    private $walet_signature;

    /**
     * @var string X Company Signature generated by Hash
     */
    private $company_signature;

    /**
     * @var string Wallet generated by Paynocchio
     */
    private $walletId;

    /**
     * @var string Base url
     */
    private string $baseUrl;


    /**
     * helper constructor.
     *
     * @param string $userId The user uuid.
     */
    public function __construct($userId) {
        $this->baseUrl = get_config('paygw_paynocchio', 'baseurl');
        $this->secret = get_config('paygw_paynocchio', 'paynocchiosecret');
        $this->envId = get_config('paygw_paynocchio', 'environmentuuid');
        $this->userId = $userId;
        $this->signature = $this->createSignature();
        $this->simpleSignature = $this->createSimpleSignature();
    }

    private function sendRequest(string $method, string $url, string $body = "", bool $simple = false): array {
        $headers = [
            'X-API-KEY: X-API-KEY',
            'Content-Type: application/json'
        ];

        $test_mode = get_config('paygw_paynocchio', 'testmode') ? 'on' : 'off';

        $headers[] = 'X-TEST-MODE-SWITCH:'. $test_mode;

        if($simple) {
            $headers[] = 'X-Company-Signature:'. $this->simpleSignature;
        } else {
            $headers[] = 'X-Wallet-Signature:'. $this->signature;
        }

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => $this->baseUrl . $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => $method,
            CURLOPT_POSTFIELDS => $body,
            CURLOPT_USERAGENT => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)',
            CURLOPT_HTTPHEADER => $headers,
        ));

        $response = curl_exec($curl);
        $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        curl_close($curl);

        return [
            'status_code' => $httpCode,
            'response' => $response,
        ];
    }

    public function get_userId()
    {
        return $this->userId;
    }

    public static function get_user($userid)
    {
        global $DB;
        return $DB->get_record('user', ['id' => $userid]);
    }

    public function get_secret()
    {
        return $this->secret;
    }

    public function get_env()
    {
        return $this->envId;
    }

    public function wallet_uuid()
    {
        return get_user_meta(get_current_user_id(), PAYNOCCHIO_WALLET_KEY, true);
    }

    /**
     *  X-Wallet-Signature
     */
    public function createSignature()
    {
        return hash("sha256", $this->secret . "|" . $this->envId . "|" . $this->userId);
    }
    /**
     *  X-Company-Signature
     */
    public function createSimpleSignature() {
        $signature = hash("sha256", $this->secret . "|" . $this->envId);
        return $signature;
    }

    /** Get Signature
     * @param false $simple
     * @return bool|string
     */
    public function getSignature($simple = false): bool|string
    {
        return $simple ? $this->simpleSignature : $this->signature;
    }

    /**
     *  Get Wallet by ID
     */
    public function getWalletById(string $walletId): array {
        $url = '/wallet/' . $walletId . '?environment_uuid=' . $this->envId;

        return $this->sendRequest('GET', $url);
    }

    /**
     *  Create Wallet
     */
    public function createWallet() {
        $data = [
            self::PAYNOCCHIO_ENV_KEY => $this->envId,
            self::PAYNOCCHIO_USER_UUID_KEY => $this->userId,
            self::PAYNOCCHIO_CURRENCY_KEY => '970d83de-1dce-47bd-a45b-bb92bf6df964',
            self::PAYNOCCHIO_TYPE_KEY => '93ac9017-4960-41bf-be6d-aa123884451d',
            self::PAYNOCCHIO_STATUS_KEY => 'ef8da49e-a9e3-4726-8c26-f8d2bfd6a093',
        ];

        $response = $this->sendRequest('POST', '/wallet/', json_encode($data, JSON_UNESCAPED_SLASHES));

        if($response['status_code'] === 201) {
            $json = json_decode($response['response']);
            $this->walletId = $json->uuid;
            return json_encode(['status'=> 'success', 'wallet' => $json->uuid,]);
        } else {
            return json_encode($response);
        }
    }

    /**
     *  TopUp Wallet
     */
    public function topUpWallet(string $walletId, float $amount) {
        $data = [
            self::PAYNOCCHIO_ENV_KEY => $this->envId,
            self::PAYNOCCHIO_USER_UUID_KEY => $this->userId,
            self::PAYNOCCHIO_WALLET_KEY => $walletId,
            "currency" => "USD",
            'amount' => $amount,
        ];

        return $this->sendRequest('POST', '/operation/topup', json_encode($data));
    }

    /**
     *  Withdraw Wallet
     */
    public function withdrawFromWallet(string $walletId, float $amount): array {
        $data = [
            PAYNOCCHIO_ENV_KEY => $this->envId,
            PAYNOCCHIO_USER_UUID_KEY => $this->userId,
            PAYNOCCHIO_WALLET_KEY => $walletId,
            "currency" => "USD",
            'amount' => $amount,
            'status_type' => 'ae1b841f-2e56-4fb9-a935-2064304f8639', // TODO Check if in't needed
        ];

        $response = $this->sendRequest('POST', '/operation/withdraw', json_encode($data));

        return $response;
    }

    /**
     *  Make Payment
     */
    public function makePayment(string $walletId, $fullAmount, $amount, string $orderId, $bonusAmount = null): array {
        $data = [
            PAYNOCCHIO_ENV_KEY => $this->envId,
            PAYNOCCHIO_USER_UUID_KEY => $this->userId,
            PAYNOCCHIO_WALLET_KEY => $walletId,
            "currency" => "USD",
            'full_amount' => $fullAmount,
            'amount' => $amount,
            'external_order_id' => $orderId,
        ];

        if ($bonusAmount !== null) {
            $data['bonus_amount'] = $bonusAmount;
        }
        $response = $this->sendRequest('POST', '/operation/payment', json_encode($data));

        return $response;
    }

    /**
     *  Get Orders List
     */
    public function getOrdersList(string $orderId, array $filters = []): array {
        $url = '/orders/' . $orderId;

        $queryParams = [
            PAYNOCCHIO_ENV_KEY => $this->envId,
            PAYNOCCHIO_USER_UUID_KEY => $this->userId,
            PAYNOCCHIO_WALLET_KEY => $this->walletId,
            // Add other filters from the $filters array
        ];

        // Example of using created_at filter
        if (isset($filters['created_at']['from'])) {
            $queryParams['created_at.from'] = $filters['created_at']['from'];
        }
        if (isset($filters['created_at']['to'])) {
            $queryParams['created_at.to'] = $filters['created_at']['to'];
        }

        $response = $this->sendRequest('GET', $url, $queryParams);

        return $response;
    }

    /**
     *  ChargeBack
     */
    public function chargeBack($orderId, $walletId, $amount) {
        $data = [
            PAYNOCCHIO_ENV_KEY => $this->envId,
            PAYNOCCHIO_USER_UUID_KEY => $this->userId,
            PAYNOCCHIO_WALLET_KEY => $walletId,
            "currency" => "USD",
            'amount' => $amount,
            'external_order_id' => $orderId,
        ];

        return $this->sendRequest('POST', '/operation/chargeback', json_encode($data));
    }

    /**
     *  Get Order by ID
     */
    public function getOrderById(string $orderId): array {
        $url = '/orders/' . $orderId .'/?environment_uuid='.$this->envId;

        return $this->sendRequest('GET', $url);
    }

    /**
     *  Wallet information
     */

    public function getWalletBalance(string $walletId): array
    {
        $user_paynocchio_wallet = $this->getWalletById($walletId);
        if($user_paynocchio_wallet['status_code'] === 200) {
            $json_response = json_decode($user_paynocchio_wallet['response']);
            return [
                'balance' => $json_response->balance->current,
                'bonuses' => $json_response->rewarding_balance,
                'number' => $json_response->number,
                'status' => $json_response->status->code,
                'code' => $json_response->status->code,
            ];
        }

        return [
            'balance' => 0,
            'bonuses' => 0,
            'number' => 0,
            'status' => $user_paynocchio_wallet['response'],
            'code' => $user_paynocchio_wallet['status_code'],
        ];
    }

    public function getWalletStatuses() {
        $url = '/status/';

        $response = $this->sendRequest('GET', $url);
        $json_response = json_decode($response['response']);

        return [
            'ACTIVE' => array_reduce($json_response->statuses, static function ($carry, $item) {
                return $carry === false && $item->code === 'ACTIVE' ? $item->uuid : $carry;
            }, false),
            'SUSPEND' => array_reduce($json_response->statuses, static function ($carry, $item) {
                return $carry === false && $item->code === 'SUSPEND' ? $item->uuid : $carry;
            }, false),
            'BLOCKED' => array_reduce($json_response->statuses, static function ($carry, $item) {
                return $carry === false && $item->code === 'BLOCKED' ? $item->uuid : $carry;
            }, false),
        ];
    }

    /**
     *  Update Wallet Status
     */
    public function updateWalletStatus(string $wallet_id, string $status)
    {
        $data = [
            PAYNOCCHIO_ENV_KEY => $this->envId,
            'uuid' => $wallet_id,
            PAYNOCCHIO_STATUS_KEY => $status,
        ];

        return $this->sendRequest('PATCH', '/wallet/', json_encode($data), true);
    }

    /**
     * Get Wallet Structure
     * This needed to check conversion rates
     */

    public function getEnvironmentStructure(): array
    {
        $url = '/wallet/environment-structure/?user_uuid=' . $this->userId . '&environment_uuid=' . $this->envId;

        return $this->sendRequest('GET', $url);
    }

}