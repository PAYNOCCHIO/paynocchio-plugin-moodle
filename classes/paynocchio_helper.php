<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Contains helper class to work with Paynocchio REST API.
 *
 * @package    paygw_paynocchio
 * @copyright  2024 Paynocchio <ceo@paynocchio.com>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace paygw_paynocchio;

use core\uuid;
use core_payment\helper as payment_helper;
use core_user;
use moodle_url;
use stdClass;

defined('MOODLE_INTERNAL') || die();

require_once($CFG->libdir . '/filelib.php');


class paynocchio_helper {

    /**
     * @var string Paynocchio settings strings.
     */
    public const PAYNOCCHIO_USER_UUID_KEY = 'user_uuid';
    public const PAYNOCCHIO_ENV_KEY = 'environment_uuid';
    public const PAYNOCCHIO_CURRENCY_KEY = 'currency_uuid';
    //SGD public const PAYNOCCHIO_CURRENCY_VALUE = '248513fc-30b2-48af-b701-0cc673282ea6';
    public const PAYNOCCHIO_CURRENCY_CODE = 'USD';
    public const PAYNOCCHIO_CURRENCY_VALUE = '970d83de-1dce-47bd-a45b-bb92bf6df964';
    public const PAYNOCCHIO_WALLET_KEY = 'wallet_uuid';
    public const PAYNOCCHIO_TYPE_KEY = 'type_uuid';
    public const PAYNOCCHIO_STATUS_KEY = 'status_uuid';
    public const PAYNOCCHIO_SECRET_KEY = 'secret_key';

    /**
     * @var string Paynocchio App secret
     */
    private $secret;

    /**
     * @var string User UUID sent to consturctor
     */
    private $userId;

    /**
     * @var string Wallet generated by Paynocchio
     */
    private $walletId;

    /**
     * @var string Base url
     */
    private string $baseUrl;

    private string|false $simpleSignature;
    /**
     * @var false|mixed|object|string
     */
    private mixed $envId;
    private string|false $signature;


    /**
     * helper constructor.
     *
     * @param string $userId The user uuid.
     */
    public function __construct($userId)
    {
        global $DB;
        $user = $DB->get_record('paygw_paynocchio_wallets', ['useruuid'  => $userId]);
        $this->baseUrl = get_config('paygw_paynocchio', 'baseurl');
        $this->secret = get_config('paygw_paynocchio', 'paynocchiosecret');
        $this->envId = get_config('paygw_paynocchio', 'environmentuuid');
        $this->userId = $userId;
        $this->signature = $this->createSignature();
        $this->simpleSignature = $this->createSimpleSignature();
        $this->walletId = $user ? $user->walletuuid : uuid::generate();
    }

    /**
     * Main cURL worker
     * @param string $method
     * @param string $url
     * @param string $body
     * @param bool $simple
     * @return array
     * @throws \dml_exception
     */
    private function sendRequest(string $method, string $url, string $body = "", bool $simple = false): array {
        $headers = [
            'X-API-KEY: X-API-KEY',
            'Content-Type: application/json'
        ];

        $test_mode = get_config('paygw_paynocchio', 'testmode') ? 'on' : 'off';

        $headers[] = 'X-TEST-MODE-SWITCH:'. $test_mode;

        if($simple) {
            $headers[] = 'X-Company-Signature:'. $this->simpleSignature;
        } else {
            $headers[] = 'X-Wallet-Signature:'. $this->signature;
        }

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => $this->baseUrl . $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => $method,
            CURLOPT_POSTFIELDS => $body,
            CURLOPT_USERAGENT => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)',
            CURLOPT_HTTPHEADER => $headers,
        ));

        $response = curl_exec($curl);
        $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);

        curl_close($curl);

        return [
            'status_code' => $httpCode,
            'response' => $response,
        ];
    }

    public function get_userId(): string
    {
        return $this->userId;
    }

    public static function get_user($userid)
    {
        global $DB;
        return $DB->get_record('user', ['id' => $userid]);
    }

    public function get_secret()
    {
        return $this->secret;
    }

    public function get_env()
    {
        return $this->envId;
    }

    /**
     *  X-Wallet-Signature
     */
    public function createSignature(): bool|string
    {
        return hash("sha256", $this->secret . "|" . $this->envId . "|" . $this->userId);
    }
    /**
     *  X-Company-Signature
     */
    public function createSimpleSignature(): bool|string
    {
        return hash("sha256", $this->secret . "|" . $this->envId);
    }

    /** Get Signature
     * @param false $simple
     * @return bool|string
     */
    public function getSignature(bool $simple = false): bool|string
    {
        return $simple ? $this->simpleSignature : $this->signature;
    }

    /**
     *  Get Wallet by ID
     */
    public function getWalletById(string $walletId): array
    {
        $url = '/wallet/' . $walletId . '?environment_uuid=' . $this->envId;

        return $this->sendRequest('GET', $url);
    }

    /**
     *  Check if Environment uuid and secret are valid
     */
    public function healtCheck()
    {
        $data = [
            self::PAYNOCCHIO_ENV_KEY => $this->envId,
            self::PAYNOCCHIO_SECRET_KEY => $this->secret,
        ];

        return $this->sendRequest('POST', '/healthcheck/', json_encode($data, JSON_UNESCAPED_SLASHES));

    }

    /**
     * Healh check helper
     * @return bool
     */
    public function checkHealth()
    {
        $wallet_response = $this->healtCheck();
        $json_response = json_decode($wallet_response['response']);
        if($json_response->status_code === 200) {
            return true;
        } else {
            return false;
        }
    }

    /**
     *  Create Wallet
     */
    public function createWallet()
    {
        $data = [
            self::PAYNOCCHIO_ENV_KEY => $this->envId,
            self::PAYNOCCHIO_USER_UUID_KEY => $this->userId,
            self::PAYNOCCHIO_CURRENCY_KEY => self::PAYNOCCHIO_CURRENCY_VALUE, // SGD
            self::PAYNOCCHIO_TYPE_KEY => '93ac9017-4960-41bf-be6d-aa123884451d',
            self::PAYNOCCHIO_STATUS_KEY => 'ef8da49e-a9e3-4726-8c26-f8d2bfd6a093',
        ];

        $response = $this->sendRequest('POST', '/wallet/', json_encode($data, JSON_UNESCAPED_SLASHES));

        if($response['status_code'] === 201) {
            $json = json_decode($response['response']);
            $this->walletId = $json->uuid;
            return json_encode(['status'=> 'success', 'wallet' => $json->uuid,]);
        } else {
            return json_encode(['status'=> 'error', 'wallet' => 'null', 'code' => $response['status_code'],]);
        }
    }

    /**
     *  TopUp Wallet
     */
    public function topUpWallet(string $walletId, float $amount, string $redirect_url)
    {
        $data = [
            self::PAYNOCCHIO_ENV_KEY => $this->envId,
            self::PAYNOCCHIO_USER_UUID_KEY => $this->userId,
            self::PAYNOCCHIO_WALLET_KEY => $walletId,
            "currency" => self::PAYNOCCHIO_CURRENCY_CODE,
            'amount' => $amount,
            'redirect_url' => $redirect_url,
        ];

        return $this->sendRequest('POST', '/operation/topup', json_encode($data));
    }

    /**
     *  Withdraw Wallet
     */
    public function withdrawFromWallet(string $walletId, float $amount): array
    {
        $data = [
            self::PAYNOCCHIO_ENV_KEY => $this->envId,
            self::PAYNOCCHIO_USER_UUID_KEY => $this->userId,
            self::PAYNOCCHIO_WALLET_KEY => $walletId,
            "currency" => self::PAYNOCCHIO_CURRENCY_CODE,
            'amount' => $amount,
        ];

        return $this->sendRequest('POST', '/operation/withdraw', json_encode($data));
    }

    /**
     *  Make Payment
     */
    public function makePayment(string $walletId, $fullAmount, $amount, string $orderId, $bonusAmount = null): array
    {
        $data = [
            self::PAYNOCCHIO_ENV_KEY => $this->envId,
            self::PAYNOCCHIO_USER_UUID_KEY => $this->userId,
            self::PAYNOCCHIO_WALLET_KEY => $walletId,
            "currency" => self::PAYNOCCHIO_CURRENCY_CODE,
            'full_amount' => $fullAmount,
            'amount' => $amount,
            'external_order_id' => $orderId,
        ];

        if ($bonusAmount !== null) {
            $data['bonus_amount'] = $bonusAmount;
        }
        return $this->sendRequest('POST', '/operation/payment', json_encode($data));
    }

    /**
     *  Wallet information
     */
    public function getWalletBalance(string $walletId): array
    {
        $user_paynocchio_wallet = $this->getWalletById($walletId);
        if($user_paynocchio_wallet['status_code'] === 200) {
            $json_response = json_decode($user_paynocchio_wallet['response']);
            return [
                'balance' => 0.01 * (int)($json_response->balance->current*100),
                'bonuses' => intval($json_response->rewarding_balance),
                'number' => $json_response->number,
                'status' => $json_response->status->code,
                'code' => $json_response->status->code,
            ];
        }

        return [
            'balance' => 0,
            'bonuses' => 0,
            'number' => 0,
            'status' => $user_paynocchio_wallet['response'],
            'code' => $user_paynocchio_wallet['status_code'],
        ];
    }

    public function getWalletStatuses()
    {
        $url = '/status/';

        $response = $this->sendRequest('GET', $url);
        $json_response = json_decode($response['response']);

        return [
            'ACTIVE' => array_reduce($json_response->statuses, static function ($carry, $item) {
                return $carry === false && $item->code === 'ACTIVE' ? $item->uuid : $carry;
            }, false),
            'SUSPEND' => array_reduce($json_response->statuses, static function ($carry, $item) {
                return $carry === false && $item->code === 'SUSPEND' ? $item->uuid : $carry;
            }, false),
            'BLOCKED' => array_reduce($json_response->statuses, static function ($carry, $item) {
                return $carry === false && $item->code === 'BLOCKED' ? $item->uuid : $carry;
            }, false),
        ];
    }

    /**
     *  Update Wallet Status
     */
    public function updateWalletStatus(string $wallet_id, string $status)
    {
        $data = [
            self::PAYNOCCHIO_ENV_KEY => $this->envId,
            'uuid' => $wallet_id,
            self::PAYNOCCHIO_STATUS_KEY => $status,
        ];

        return $this->sendRequest('PATCH', '/wallet/', json_encode($data), true);
    }

    /**
     * Get Wallet Structure
     * This needed to check conversion rates
     */

    public function getEnvironmentStructure()
    {
        $url = '/wallet/environment-structure/?user_uuid=' . $this->userId . '&environment_uuid=' . $this->envId;

        $response = $this->sendRequest('GET', $url);
        $json_response = json_decode($response['response']);
        if($response['status_code'] === 200) {
            $filtered_rewards = self::filterEnvRewardingGroups($json_response->rewarding_groups);
            return [
                'card_balance_limit' => $json_response->card_balance_limit,
                'daily_transaction_limit' => $json_response->daily_transaction_limit,
                'multiple_accounts_limit' => $json_response->multiple_accounts_limit,
                'minimum_topup_amount' => $json_response->minimum_topup_amount,
                'bonus_conversion_rate' => $json_response->bonus_conversion_rate,
                'allow_withdraw' => $json_response->allow_withdraw,
                'rewarding_group' => $filtered_rewards[0], // TODO: Test rewarding groups
                //'rewarding_group' => end($filtered_rewards),
                'wallet_percentage_commission' => 2.9,
                'wallet_fixed_commission' => 0.3,
            ];
        }
    }

    /**
     *  Wallet information
     */
    public function getCurrencies(): array
    {
        $data = [];

        return $this->sendRequest('GET', '/currency/', json_encode($data));
    }

    /**
     * Transform and merge identical rules
     * @param $data
     * @return array|null
     */
    public function transformRewardingRules($data)
    {
    $result = [];

    if ($data) {
        foreach ($data as $item) {
            $existing = null;

            foreach ($result as &$el) {
                if ($el->operation_type === $item->operation_type &&
                    $el->min_amount === $item->min_amount &&
                    $el->max_amount === $item->max_amount) {
                    $existing = &$el;
                    break;
                }
            }

            if ($existing) {
                $existing['value'] += $item->value;
            } else {
                $result[] = $item;
            }
        }

        return $result;
    }

    return null;
    }

    /**
     * Calculate Rewarding rule for static data
     * @param $sum
     * @param $operationType
     * @return array
     */
    public function getCurrentRewardRule($sum, $operationType) {
        $obj = $this->transformRewardingRules($this->getEnvironmentStructure()['rewarding_group']->rewarding_rules);
        $totalValue = 0;
        $minAmount = INF;
        $maxAmount = -INF;
        $value_type = null;
        $conversion_rate = 1;

        if ($obj) {
            foreach ($obj as $item) {
                $conversion_rate = $item->conversion_rate;
                $value_type = $item->value_type;
                if ($item->operation_type === $operationType && $sum >= $item->min_amount && $sum <= $item->max_amount) {
                    $totalValue += $item->value;
                    if ($item->min_amount < $minAmount) {
                        $minAmount = $item->min_amount;
                    }
                    if ($item->max_amount > $maxAmount) {
                        $maxAmount = $item->max_amount;
                    }
                }
            }
        }
        return [
            'totalValue' => $value_type === 'percentage' ? $totalValue / $conversion_rate / 100 : $totalValue,
            'minAmount' => $minAmount,
            'maxAmount' => $maxAmount,
            'value_type' => $value_type,
            'conversion_rate' => $conversion_rate,
            'operationType' => $operationType,
        ];
    }

    /**
     * Calculated Rewarding and Commission
     * @param float $sum
     * @param string $operationType
     * @return array
     */
    public function calculateRewardsAndCommissions(float $sum, string $operationType): array
    {
        $rules = $this->getCurrentRewardRule($sum, $operationType);
        $wallet_structure = $this->getEnvironmentStructure();
        $conversion_rate_when_payment = $wallet_structure['bonus_conversion_rate'] ?: 1;
        $sum_with_commission = $this->calculateSumWithCommission($sum);
        $commission = round($sum_with_commission - $sum, 1);
        $sum_without_commission = round($sum - $commission, 2);

        if($rules['value_type'] === "percentage") {
            $bonuses_to_get = intval($sum_without_commission * $rules['totalValue']);
        } else {
            $bonuses_to_get = $rules['totalValue'];
        }

        return [
          'bonuses_to_get' => $bonuses_to_get,
          'bonuses_in_dollar' => round($bonuses_to_get * $conversion_rate_when_payment, 2),
          'commission' => $commission,
          'sum_without_commission' => $sum_without_commission,
          'sum_with_commission' => $sum_with_commission,
          'sum_with_commission_minus_commission' => $sum_with_commission - $commission,
        ];

    }

    /**
     * Calculate commission
     */
    public function calculateSumWithCommission($sum)
    {
        $wallet_structure = $this->getEnvironmentStructure();
        $wallet_percentage_commission = $wallet_structure['wallet_percentage_commission'] ?? 0;
        $wallet_fixed_commission = $wallet_structure['wallet_fixed_commission'] ?? 0;
        $wallet_commission_coefficient = 1 - ($wallet_percentage_commission / 100);

        return round(($sum + $wallet_fixed_commission) / $wallet_commission_coefficient + 0.01, 2);
    }

    /**
     * Calculate need to Top up with commission
     * @param float $cost
     */
    public function calculateNeedToTopUpWithCommission($cost): array
    {
        $wallet_structure = $this->getEnvironmentStructure();
        $wallet_balance_response = $this->getWalletBalance($this->walletId) ?: 0;
        $wallet_balance = $wallet_balance_response['balance'];
        $conversion_rate_when_payment = $wallet_structure['bonus_conversion_rate'] ?: 1;
        $max_bonuses_to_spend = $wallet_balance_response['bonuses'];
        $money_bonuses_equivalent = $max_bonuses_to_spend * $conversion_rate_when_payment;
        $rewarding_rules_topup = $this->getCurrentRewardRule($cost, 'payment_operation_add_money');
        $rewarding_value_for_topup = $rewarding_rules_topup['totalValue'];
        $rewarding_for_topup = 1 + $rewarding_value_for_topup * $conversion_rate_when_payment;

        $ceil_course_rounded_cost = ceil($cost);

        $need_to_topup_without_commission = ceil(($ceil_course_rounded_cost - floor($wallet_balance) - floor($money_bonuses_equivalent)) / $rewarding_for_topup);
        $need_to_topup = ceil($this->calculateSumWithCommission($need_to_topup_without_commission));
        $need_to_topup_with_commission = ceil($this->calculateSumWithCommission($need_to_topup));

        $rewards_for_topup = $this->calculateRewardsAndCommissions($need_to_topup, 'payment_operation_add_money');
        $bonuses_for_topup = $rewards_for_topup['bonuses_to_get'];
        $bonuses_for_topup_in_dollar = $rewards_for_topup['bonuses_in_dollar'];

        $new_cost_after_topup = $cost - $bonuses_for_topup_in_dollar;

        $rewards_for_payment = $this->calculateRewardsAndCommissions($new_cost_after_topup, 'payment_operation_for_services');

        $bonuses_for_payment = $rewards_for_payment['bonuses_to_get'];

        if($max_bonuses_to_spend && $money_bonuses_equivalent < $cost) {
            $max_bonus = $max_bonuses_to_spend;
        } else {
            $max_bonus = $cost;
        }

        return [
            'bonuses_for_topup' => $bonuses_for_topup,
            'bonuses_for_topup_in_dollar' => $bonuses_for_topup_in_dollar,
            'bonuses_for_payment' => $bonuses_for_payment,
            'need_to_topup' => $need_to_topup,
            'need_to_topup_with_commission' => $need_to_topup_with_commission,
            'need_to_topup_with_commission_without_bonuses' => $this->calculateSumWithCommission($cost),
            'max_bonus' => $max_bonus,
            'max_bonuses_to_spend' => $max_bonuses_to_spend,
        ];
    }

    /**
     * Filter the rewarding groups array to return only active and not expired campaigns
     * @param $groups
     * @return array
     */

    static function filterEnvRewardingGroups($groups): array
    {
        return array_values(array_filter($groups, [__CLASS__, 'checkFilter']));
    }

    /**
     * Filter rule for campaign filtering
     * @param $group
     * @return bool
     */
    static function checkFilter($group): bool
    {
        return $group->active && strtotime($group->date_from) <= time() && strtotime($group->date_to) >= time();
    }

    /**
     * Get Transaction History
     * This needed to check wallet Limit
     */

    public function getTransactionHistory(string $wallet_uuid, string $start, string $end, int $page = 1, int $size = 500)
    {
        $url = '/wallet/transaction-history/?user_uuid=' . $this->userId . '&environment_uuid=' . $this->envId . '&wallet_uuid=' . $wallet_uuid . '&start='.$start. '&end='.$end.'&page='.$page.'&size='.$size;

        $response = $this->sendRequest('GET', $url);
        return json_decode($response['response'])->item;
    }

    /** Count current limit
     *
     */
    public function countTodayTransactions(string $wallet_uuid)
    {
        $start = strtotime('today midnight');
        $end = time();
        $items = $this->getTransactionHistory($wallet_uuid, $start, $end);
        $sum = '0';
        foreach ($items as $item) {
            if($item->status === 'complete') {
                $sum += $item->amount;
            }
        }
       return $sum;
    }

    /**
     * Register Transaction
     */
    public static function registerTransaction(int $user_id, string $type, $totalamount, $bonusAmount, int $paymentid = null)
    {
        global $DB;

        $record = new stdClass();
        $record->userid = $user_id;
        $record->paymentid = $paymentid;
        $record->type = $type;
        $record->totalamount = $totalamount;
        $record->bonuses = $bonusAmount ?? 0;
        $record->timecreated = time();

        $DB->insert_record('paygw_paynocchio_transactions', $record);
    }

    /**
     * Update wallet Status
     */
    public static function updateWalletDBStatus(int $id, string $wallet_uuid, string $status)
    {
        global $DB;

        $record = new stdClass();
        $record->id = $id;
        $record->wallet_uuid = $wallet_uuid;
        $record->status = $status;

        return $DB->update_record('paygw_paynocchio_wallets', $record);
    }

    /**
     * Delete Wallet
     */
    public static function deleteWallet(string $wallet_uuid)
    {
        global $DB;

        $wallet = $DB->get_record('paygw_paynocchio_wallets', ['walletuuid' => $wallet_uuid]);
        $wallets = $DB->delete_records('paygw_paynocchio_wallets',['walletuuid' => $wallet_uuid]);
        $transactions = $DB->delete_records('paygw_paynocchio_transactions',['userid' => $wallet->userid]);

        return $wallets && $transactions;
    }

    /**
     * Check if enrolled already
     */
    public static function user_has_payed($itemid, $userid): bool
    {
        global $DB;
        return $DB->count_records('paygw_paynocchio_payments', ['itemid' => $itemid, 'userid' => $userid]) > 0;
    }

    public static function get_pending(): array
    {
        global $DB;
        return $DB->get_records('paygw_paynocchio_payments', ['status' => 'P']);
    }

    /**
     * Register Payment
     */
    public static function registerPayment(
        $paymentid,
        $component,
        $paymentarea,
        $description,
        $itemid,
        $orderuuid,
        $user_id,
        $totalamount,
        $paid,
        $bonuses_used,
        $status)
    {
        global $DB;

        if (paynocchio_helper::user_has_payed($itemid, $user_id)) {
            return null;
        }

        $record = new stdClass();
        $record->paymentid = $paymentid;
        $record->component = $component;
        $record->paymentarea = $paymentarea;
        $record->description = $description;
        $record->itemid = $itemid;
        $record->orderuuid = $orderuuid;
        $record->userid = $user_id;
        $record->paymentid = $paymentid;
        $record->totalamount = $totalamount;
        $record->paid = $paid;
        $record->bonuses_used = $bonuses_used;
        $record->status = $status;
        $record->timecreated = time();

        $DB->insert_record('paygw_paynocchio_payments', $record);
    }

    public static function files(): array
    {
        $fs = get_file_storage();
        $files = $fs->get_area_files(\context_system::instance()->id, 'paygw_paynocchio', 'brandlogoimage');
        $realfiles=array();
        foreach ($files as $f) {
            if($f->get_filename()!='.') {
                array_push($realfiles, $f);
            }
        }
        return $realfiles;
    }

    public static function custom_logo()
    {
        $files = paynocchio_helper::files();
        if($files) {
            $logo_url = moodle_url::make_pluginfile_url(
                $files[0]->get_contextid(),
                $files[0]->get_component(),
                $files[0]->get_filearea(),
                $files[0]->get_itemid(),
                $files[0]->get_filepath(),
                $files[0]->get_filename(),
                false                     // Do not force download of the file.
            );
            return '<img src="'.$logo_url.'" alt="'.get_string('paynocchio', 'paygw_paynocchio').'" />';
        } else {
            return null;
        }
    }

    /**
     * Check if Payment confirmed
     */

    public static function checkPaymentConfirmation($paymentid)
    {
        global $DB;
        $record = $DB->get_record('paygw_paynocchio_payments', ['paymentid' => $paymentid]);
        return $record->status === 'C';
    }

    /**
     * Aprobe payment manually
     */
    public static function aprobe_pay($id)
    {
        global $DB;
        $order = $DB->get_record('paygw_paynocchio_payments', ['id' => $id]);

        if($order) {
                $order->status = 'C';
                $order->timeupdated = time();

                if(self::processPayment($order)) {
                    return [
                        'success' => true,
                        'message' => 'Order updated as completed',
                    ];
                } else {
                    return [
                        'success' => false,
                        'message' => 'Something went wrong',
                    ];
                }
        }
    }

    /**
     * Deny payment manually
     */
    public static function deny_pay($id): bool
    {
        global $DB;
        return $DB->delete_records('paygw_paynocchio_payments', ['id' => $id]);
    }

    /**
     * Processing payment
     * @param $order
     * @return bool
     * @throws \dml_exception
     */
    public static function processPayment($order)
    {
        global $DB;

        paynocchio_helper::registerTransaction((int) $order->userid, 'payment', $order->totalamount, $order->bonuses_used, (int)$order->paymentid);
        payment_helper::deliver_order($order->component, $order->paymentarea, (int) $order->itemid, (int) $order->paymentid, (int) $order->userid);

        $DB->update_record('paygw_paynocchio_payments', $order);

        $paymentuser = $DB->get_record('user', ['id' => $order->userid]);
        $supportuser = core_user::get_support_user();

        try{
            email_to_user($paymentuser, $supportuser, get_string('paynocchio_transaction_subject', 'paygw_paynocchio'), get_string('paynocchio_transaction_message', 'paygw_paynocchio', ['username' => $paymentuser->firstname . ' ' . $paymentuser->lastname, 'sum' => $amount ]));
            email_to_user($paymentuser, $supportuser, get_string('paynocchio_confirmation_subject', 'paygw_paynocchio'), get_string('paynocchio_confirmation_message', 'paygw_paynocchio', ['username' => $paymentuser->firstname . ' ' . $paymentuser->lastname ]));
        } catch (\Exception $e) {
            // On localhost email sending fails
            return false;
        }

        return true;
    }

}
