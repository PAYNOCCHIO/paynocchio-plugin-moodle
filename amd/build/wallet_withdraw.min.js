define("paygw_paynocchio/wallet_withdraw",["exports","./repository","./debounce"],(function(_exports,_repository,_debounce){var obj;
/**
   * Paynocchio repository module to encapsulate all of the AJAX requests that can be sent for bank.
   *
   * @module     paygw_paynocchio/repository
   * @copyright  2024 Paynocchio <ceo@paynocchio.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */let debouncedCalculateReward;Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_debounce=(obj=_debounce)&&obj.__esModule?obj:{default:obj};const checkAvailability=(inputVal,balance)=>!(""===inputVal||0===parseFloat(inputVal)||parseFloat(inputVal)>parseFloat(balance));_exports.init=(balance,card_balance_limit)=>{const paynocchio_wallet_withdraw_button=document.getElementById("paynocchio_withdraw_button");paynocchio_wallet_withdraw_button&&paynocchio_wallet_withdraw_button.addEventListener("click",(()=>{(0,_repository.showModalWithWithdraw)().then((modal=>{modal.setTitle("Withdraw from the Wallet");const input=modal.body.find("#withdraw_amount"),button=modal.body.find("#withdraw_button"),message=modal.body.find("#withdraw_message");checkAvailability(input.val(),balance)||(button.addClass("disabled"),message.text("Operation is not permitted")),input.keyup((evt=>{checkAvailability(evt.target.value,balance)?(button.removeClass("disabled"),debouncedCalculateReward=(0,_debounce.default)((inputValue=>{message.addClass("loading"),message.addClass("loading"),(0,_repository.calculateReward)(inputValue,"payment_operation_add_money").then((rewards=>{inputValue+balance>card_balance_limit?(message.text(`When replenishing the amount ${inputValue},\n                            the balance limit will exceed the set value ${card_balance_limit}.`),message.text(""),button.addClass("disabled")):inputValue<=balance?(message.addClass("loading"),message.text(`You will receive $${rewards.sum_without_commission}. \n                    Commission: $${rewards.commission}.`),button.removeClass("disabled")):(message.text("Please enter amount more than minimum replenishment amount."),message.text(""),button.addClass("disabled")),message.removeClass("loading"),message.removeClass("loading")}))}),500),debouncedCalculateReward(evt.target.value)):(button.addClass("disabled"),message.text("Operation is not permitted"),clearTimeout(debouncedCalculateReward))})),button.click((()=>{checkAvailability(input.val(),balance)?(button.addClass("disabled"),modal.body.find(".paynocchio-spinner").toggleClass("active"),modal.body.find("#withdraw_message").text("Working..."),(0,_repository.handleWithdrawClick)(input.val()).then((data=>{data.success?(modal.body.find(".paynocchio-spinner").toggleClass("active"),modal.body.find("#withdraw_message").text("Success! Reloading..."),window.location.reload()):(modal.body.find(".paynocchio-spinner").toggleClass("active"),modal.body.find("#withdraw_message").text("Something wrong. Please reload page and try again... "+data.wallet_status),button.toggleClass("disabled"))}))):modal.body.find("#withdraw_message").text("Yeah... right... ;)")}))}))}))}}));

//# sourceMappingURL=wallet_withdraw.min.js.map