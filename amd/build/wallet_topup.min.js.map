{"version":3,"file":"wallet_topup.min.js","sources":["../src/wallet_topup.js"],"sourcesContent":["// This file is part of the Paynocchio payments module for Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Paynocchio repository module to encapsulate all of the AJAX requests that can be sent for bank.\r\n *\r\n * @module     paygw_paynocchio/repository\r\n * @copyright  2024 Paynocchio <ceo@paynocchio.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {handleTopUpClick, showModalWithTopup} from \"./repository\";\r\n\r\n/**\r\n * Adapt rewarding rules to sum values of the same rules\r\n * @param {object} data\r\n * @return {*[]}\r\n */\r\nconst transformRewardingRules = (data) => {\r\n    const result = [];\r\n\r\n    if(data) {\r\n        data.forEach(item => {\r\n            let existing = result.find(el =>\r\n                el.operation_type === item.operation_type &&\r\n                el.min_amount === item.min_amount &&\r\n                el.max_amount === item.max_amount\r\n            );\r\n\r\n            if (existing) {\r\n                existing.value += item.value;\r\n            } else {\r\n                result.push({ ...item });\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Find eligible Operations\r\n * @param {object} obj\r\n * @param {number} num\r\n * @param {string} operationType\r\n * @return {*}\r\n */\r\nconst getCurrentRewardRule = (obj, num, operationType) => {\r\n    let totalValue = 0;\r\n    let minAmount = Infinity;\r\n    let maxAmount = -Infinity;\r\n    let value_type;\r\n    let conversion_rate = 1;\r\n\r\n    if(obj) {\r\n        obj.forEach(item => {\r\n            if (item.operation_type === operationType && num >= item.min_amount && num <= item.max_amount) {\r\n                totalValue += item.value;\r\n                value_type = item.value_type;\r\n                conversion_rate = item.conversion_rate;\r\n                if (item.min_amount < minAmount) {\r\n                    minAmount = item.min_amount;\r\n                }\r\n                if (item.max_amount > maxAmount) {\r\n                    maxAmount = item.max_amount;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return {\r\n        totalValue: value_type === 'percentage' ? parseInt(totalValue / conversion_rate) : totalValue,\r\n        minAmount,\r\n        maxAmount,\r\n        value_type,\r\n        conversion_rate,\r\n    };\r\n\r\n};\r\n\r\nconst calculateReward = (amount, rules, type) => {\r\n    const total_value = getCurrentRewardRule(rules, amount, type).totalValue;\r\n    const value_type = getCurrentRewardRule(rules, amount, type).value_type;\r\n    return value_type === 'percentage' ? parseInt(amount * (total_value / 100)) : total_value;\r\n};\r\n\r\nexport const init = (pay, minimum_topup_amount, card_balance_limit, balance, rewarding_rules) => {\r\n    const reducedRules = transformRewardingRules(rewarding_rules);\r\n\r\n    const paynocchio_wallet_topup_button = document.getElementById('paynocchio_topup_button');\r\n\r\n    let need_to_top_up = 0;\r\n    if(pay && document.getElementById('need_to_top_up')) {\r\n        need_to_top_up = parseFloat(document.getElementById('need_to_top_up').innerText);\r\n    } else {\r\n        need_to_top_up = minimum_topup_amount;\r\n    }\r\n\r\n    if (paynocchio_wallet_topup_button) {\r\n\r\n        paynocchio_wallet_topup_button.addEventListener('click', () => {\r\n            showModalWithTopup(minimum_topup_amount, card_balance_limit)\r\n                .then(modal => {\r\n                    modal.setTitle('Topup your Wallet');\r\n                    const button = modal.body.find('#topup_button');\r\n                    const input = modal.body.find('#top_up_amount');\r\n                    const message = modal.body.find('#topup_message');\r\n                    if(need_to_top_up) {\r\n                        const top_up_default_input = need_to_top_up <= minimum_topup_amount ? minimum_topup_amount: need_to_top_up;\r\n                        input.val(top_up_default_input);\r\n\r\n                        if(calculateReward(need_to_top_up,\r\n                            reducedRules, 'payment_operation_add_money') > 0) {\r\n                            message.text(`You will get ${calculateReward(need_to_top_up,\r\n                                reducedRules, 'payment_operation_add_money')} bonuses`);\r\n                        }\r\n                    }\r\n                    input.on('keyup change', (evt) => {\r\n                        if (parseFloat(evt.target.value) + balance > card_balance_limit) {\r\n                            message.text(`When replenishing the amount ${evt.target.value}, \r\n                            the balance limit will exceed the set value ${card_balance_limit}`);\r\n                            button.addClass('disabled');\r\n                        } else if (evt.target.value >= minimum_topup_amount) {\r\n                            if(calculateReward(evt.target.value, reducedRules, 'payment_operation_add_money') > 0) {\r\n                                message.text(`You will get ${\r\n                                    calculateReward(evt.target.value, reducedRules, 'payment_operation_add_money')\r\n                                } bonuses`);\r\n                            } else {\r\n                                message.text('');\r\n                            }\r\n                            button.removeClass('disabled');\r\n                        } else {\r\n                            message.text('Please enter amount more than minimum replenishment amount.');\r\n                            button.addClass('disabled');\r\n                        }\r\n                    });\r\n\r\n                    button.click(() => {\r\n                        if (input.val()) {\r\n                            button.addClass('disabled');\r\n                            modal.body.find('.paynocchio-spinner').toggleClass('active');\r\n                            modal.body.find('#topup_message').text('Working...');\r\n\r\n                            let redirectLink = window.location.href;\r\n                            let regex = new RegExp('[?&](success=)[^&]+');\r\n                            redirectLink = redirectLink.replace( regex , '');\r\n                            if (redirectLink.indexOf('?') != -1) {\r\n                                redirectLink = redirectLink + '&success=1';\r\n                            } else {\r\n                                redirectLink = redirectLink + '?success=1';\r\n                            }\r\n\r\n                            handleTopUpClick(input.val(), redirectLink)\r\n                                .then(data => {\r\n                                    if (!data.is_error && data.url) {\r\n                                        modal.body.find('#topup_message').text('OK... Sending to Stripe...');\r\n                                        window.location.replace(data.url);\r\n                                    } else {\r\n                                        modal.body.find('.paynocchio-spinner').toggleClass('active');\r\n                                        modal.body.find('#topup_message')\r\n                                            .text(data.message);\r\n                                        button.toggleClass('disabled');\r\n                                    }\r\n                                });\r\n                        }\r\n                    });\r\n                });\r\n        });\r\n    }\r\n};"],"names":["getCurrentRewardRule","obj","num","operationType","value_type","totalValue","minAmount","Infinity","maxAmount","conversion_rate","forEach","item","operation_type","min_amount","max_amount","value","parseInt","calculateReward","amount","rules","type","total_value","_exports","init","pay","minimum_topup_amount","card_balance_limit","balance","rewarding_rules","reducedRules","data","result","existing","find","el","push","transformRewardingRules","paynocchio_wallet_topup_button","document","getElementById","need_to_top_up","parseFloat","innerText","addEventListener","showModalWithTopup","then","modal","setTitle","button","body","input","message","top_up_default_input","val","text","on","evt","target","addClass","removeClass","click","toggleClass","redirectLink","window","location","href","regex","RegExp","replace","indexOf","handleTopUpClick","is_error","url"],"mappings":"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"}