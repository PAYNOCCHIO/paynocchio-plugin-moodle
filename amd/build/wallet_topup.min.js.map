{"version":3,"file":"wallet_topup.min.js","sources":["../src/wallet_topup.js"],"sourcesContent":["// This file is part of the Paynocchio payments module for Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Paynocchio repository module to encapsulate all of the AJAX requests that can be sent for bank.\n *\n * @module     paygw_paynocchio/repository\n * @copyright  2024 Paynocchio <ceo@paynocchio.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {handleTopUpClick, showModalWithTopup} from \"./repository\";\n\n/**\n * Adapt rewarding rules to sum values of the same rules\n * @param {object} data\n * @return {*[]}\n */\nconst transformRewardingRules = (data) => {\n    const result = [];\n\n    data.forEach(item => {\n        let existing = result.find(el =>\n            el.operation_type === item.operation_type &&\n            el.min_amount === item.min_amount &&\n            el.max_amount === item.max_amount\n        );\n\n        if (existing) {\n            existing.value += item.value;\n        } else {\n            result.push({ ...item });\n        }\n    });\n\n    return result;\n};\n\n/**\n * Find eligible Operations\n * @param {object} obj\n * @param {number} num\n * @param {string} operationType\n * @return {*}\n */\nconst getCurrentRewardRule = (obj, num, operationType) => {\n    let totalValue = 0;\n    let minAmount = Infinity;\n    let maxAmount = -Infinity;\n    let value_type;\n\n    obj.forEach(item => {\n        if (item.operation_type === operationType && num >= item.min_amount && num <= item.max_amount) {\n            totalValue += item.value;\n            value_type = item.value_type;\n            if (item.min_amount < minAmount) {\n                minAmount = item.min_amount;\n            }\n            if (item.max_amount > maxAmount) {\n                maxAmount = item.max_amount;\n            }\n        }\n    });\n\n    return {\n        totalValue,\n        minAmount,\n        maxAmount,\n        value_type,\n    };\n};\n\nconst calculateReward = (amount, rules, type) => {\n    const total_value = getCurrentRewardRule(rules, amount, type).totalValue;\n    const value_type = getCurrentRewardRule(rules, amount, type).value_type;\n    return value_type === 'percentage' ? parseInt(amount * (total_value / 100)) : total_value;\n};\n\nexport const init = (pay, minimum_topup_amount, card_balance_limit, balance, rewarding_rules) => {\n    const reducedRules = transformRewardingRules(rewarding_rules);\n\n    const paynocchio_wallet_topup_button = document.getElementById('paynocchio_topup_button');\n\n    let need_to_top_up = 0;\n    if(pay && document.getElementById('need_to_top_up')) {\n        need_to_top_up = parseFloat(document.getElementById('need_to_top_up').innerText);\n    } else {\n        need_to_top_up = minimum_topup_amount;\n    }\n\n    if (paynocchio_wallet_topup_button) {\n\n        paynocchio_wallet_topup_button.addEventListener('click', () => {\n            showModalWithTopup(minimum_topup_amount, card_balance_limit)\n                .then(modal => {\n                    modal.setTitle('Topup your Wallet');\n                    const button = modal.body.find('#topup_button');\n                    const input = modal.body.find('#top_up_amount');\n                    const message = modal.body.find('#topup_message');\n                    if(need_to_top_up) {\n                        const top_up_default_input = need_to_top_up <= minimum_topup_amount ? minimum_topup_amount: need_to_top_up;\n                        input.val(top_up_default_input);\n\n                        if(calculateReward(need_to_top_up,\n                            reducedRules, 'payment_operation_add_money') > 0) {\n                            message.text(`You will get ${calculateReward(need_to_top_up,\n                                reducedRules, 'payment_operation_add_money')} bonuses`);\n                        }\n                    }\n                    input.on('keyup change', (evt) => {\n                        if (parseFloat(evt.target.value) + balance > card_balance_limit) {\n                            message.text(`When replenishing the amount ${evt.target.value}, \n                            the balance limit will exceed the set value ${card_balance_limit}`);\n                            button.addClass('disabled');\n                        } else if (evt.target.value >= minimum_topup_amount) {\n                            message.text(`You will get ${\n                                calculateReward(evt.target.value, reducedRules, 'payment_operation_add_money')\n                            } bonuses`);\n                            button.removeClass('disabled');\n                        } else {\n                            message.text('Please enter amount more than minimum replenishment amount.');\n                            button.addClass('disabled');\n                        }\n                    });\n\n                    button.click(() => {\n                        if (input.val()) {\n                            button.addClass('disabled');\n                            modal.body.find('.paynocchio-spinner').toggleClass('active');\n                            modal.body.find('#topup_message').text('Working...');\n\n                            let redirectLink = window.location.href;\n                            let regex = new RegExp('[?&](success=)[^&]+');\n                            redirectLink = redirectLink.replace( regex , '');\n                            if (redirectLink.indexOf('?') != -1) {\n                                redirectLink = redirectLink + '&success=1';\n                            } else {\n                                redirectLink = redirectLink + '?success=1';\n                            }\n\n                            handleTopUpClick(input.val(), redirectLink)\n                                .then(data => {\n                                    if (!data.is_error && data.url) {\n                                        modal.body.find('#topup_message').text('OK... Sending to Stripe...');\n                                        window.location.replace(data.url);\n                                    } else {\n                                        modal.body.find('.paynocchio-spinner').toggleClass('active');\n                                        modal.body.find('#topup_message')\n                                            .text(data.message);\n                                        button.toggleClass('disabled');\n                                    }\n                                });\n                        }\n                    });\n                });\n        });\n    }\n};"],"names":["getCurrentRewardRule","obj","num","operationType","value_type","totalValue","minAmount","Infinity","maxAmount","forEach","item","operation_type","min_amount","max_amount","value","calculateReward","amount","rules","type","total_value","parseInt","pay","minimum_topup_amount","card_balance_limit","balance","rewarding_rules","reducedRules","data","result","existing","find","el","push","transformRewardingRules","paynocchio_wallet_topup_button","document","getElementById","need_to_top_up","parseFloat","innerText","addEventListener","then","modal","setTitle","button","body","input","message","top_up_default_input","val","text","on","evt","target","addClass","removeClass","click","toggleClass","redirectLink","window","location","href","regex","RegExp","replace","indexOf","is_error","url"],"mappings":";;;;;;;;MAyDMA,qBAAuB,CAACC,IAAKC,IAAKC,qBAIhCC,WAHAC,WAAa,EACbC,UAAYC,EAAAA,EACZC,WAAaD,EAAAA,SAGjBN,IAAIQ,SAAQC,OACJA,KAAKC,iBAAmBR,eAAiBD,KAAOQ,KAAKE,YAAcV,KAAOQ,KAAKG,aAC/ER,YAAcK,KAAKI,MACnBV,WAAaM,KAAKN,WACdM,KAAKE,WAAaN,YAClBA,UAAYI,KAAKE,YAEjBF,KAAKG,WAAaL,YAClBA,UAAYE,KAAKG,gBAKtB,CACHR,WAAAA,WACAC,UAAAA,UACAE,UAAAA,UACAJ,WAAAA,aAIFW,gBAAkB,CAACC,OAAQC,MAAOC,cAC9BC,YAAcnB,qBAAqBiB,MAAOD,OAAQE,MAAMb,iBAExC,eADHL,qBAAqBiB,MAAOD,OAAQE,MAAMd,WACxBgB,SAASJ,QAAUG,YAAc,MAAQA,2BAG9D,CAACE,IAAKC,qBAAsBC,mBAAoBC,QAASC,yBACnEC,aA7DuBC,CAAAA,aACvBC,OAAS,UAEfD,KAAKlB,SAAQC,WACLmB,SAAWD,OAAOE,MAAKC,IACvBA,GAAGpB,iBAAmBD,KAAKC,gBAC3BoB,GAAGnB,aAAeF,KAAKE,YACvBmB,GAAGlB,aAAeH,KAAKG,aAGvBgB,SACAA,SAASf,OAASJ,KAAKI,MAEvBc,OAAOI,KAAK,IAAKtB,UAIlBkB,QA4CcK,CAAwBR,iBAEvCS,+BAAiCC,SAASC,eAAe,+BAE3DC,eAAiB,EAEjBA,eADDhB,KAAOc,SAASC,eAAe,kBACbE,WAAWH,SAASC,eAAe,kBAAkBG,WAErDjB,qBAGjBY,gCAEAA,+BAA+BM,iBAAiB,SAAS,wCAClClB,qBAAsBC,oBACpCkB,MAAKC,QACFA,MAAMC,SAAS,2BACTC,OAASF,MAAMG,KAAKf,KAAK,iBACzBgB,MAAQJ,MAAMG,KAAKf,KAAK,kBACxBiB,QAAUL,MAAMG,KAAKf,KAAK,qBAC7BO,eAAgB,OACTW,qBAAuBX,gBAAkBf,qBAAuBA,qBAAsBe,eAC5FS,MAAMG,IAAID,sBAEPjC,gBAAgBsB,eACfX,aAAc,+BAAiC,GAC/CqB,QAAQG,KAAM,gBAAenC,gBAAgBsB,eACzCX,aAAc,0CAG1BoB,MAAMK,GAAG,gBAAiBC,MAClBd,WAAWc,IAAIC,OAAOvC,OAASU,QAAUD,oBACzCwB,QAAQG,KAAM,gCAA+BE,IAAIC,OAAOvC,oFACVS,sBAC9CqB,OAAOU,SAAS,aACTF,IAAIC,OAAOvC,OAASQ,sBAC3ByB,QAAQG,KAAM,gBACVnC,gBAAgBqC,IAAIC,OAAOvC,MAAOY,aAAc,0CAEpDkB,OAAOW,YAAY,cAEnBR,QAAQG,KAAK,+DACbN,OAAOU,SAAS,gBAIxBV,OAAOY,OAAM,QACLV,MAAMG,MAAO,CACbL,OAAOU,SAAS,YAChBZ,MAAMG,KAAKf,KAAK,uBAAuB2B,YAAY,UACnDf,MAAMG,KAAKf,KAAK,kBAAkBoB,KAAK,kBAEnCQ,aAAeC,OAAOC,SAASC,KAC/BC,MAAQ,IAAIC,OAAO,uBACvBL,aAAeA,aAAaM,QAASF,MAAQ,KACX,GAA9BJ,aAAaO,QAAQ,KACrBP,cAA8B,aAE9BA,cAA8B,8CAGjBZ,MAAMG,MAAOS,cACzBjB,MAAKd,QACGA,KAAKuC,UAAYvC,KAAKwC,KACvBzB,MAAMG,KAAKf,KAAK,kBAAkBoB,KAAK,8BACvCS,OAAOC,SAASI,QAAQrC,KAAKwC,OAE7BzB,MAAMG,KAAKf,KAAK,uBAAuB2B,YAAY,UACnDf,MAAMG,KAAKf,KAAK,kBACXoB,KAAKvB,KAAKoB,SACfH,OAAOa,YAAY"}